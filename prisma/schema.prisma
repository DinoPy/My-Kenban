// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model UserSchema {
    id       String  @id @default(cuid())
    email    String  @unique
    name     String
    password String?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    BoardSchema Board[]
}

model FolderContainer {
    id   String @id @default(cuid())
    name String

    Boards Board[]
}

model Board {
    id               String  @id @default(cuid())
    title            String  @default("Untitled")
    icon             String  @default("â›©")
    description      String  @default("Add description here, \n You can add multiline description \n start now!")
    position         Int     @default(0)
    favorite         Boolean @default(false)
    favoritePosition Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId            String
    user              UserSchema       @relation(fields: [userId], references: [id], onDelete: Cascade)
    Section           Section[]
    FolderContainer   FolderContainer? @relation(fields: [folderContainerId], references: [id])
    folderContainerId String?
}

model Section {
    id      String @id @default(cuid())
    title   String @default("")
    boardId String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    task    Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id       String @id @default(cuid())
    title    String @default("")
    content  String @default("") // @db.Text
    position Int    @default(0)

    sectionId String
    section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
