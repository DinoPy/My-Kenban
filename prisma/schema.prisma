generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Folder {
  id      String     @id @default(cuid())
  name    String
  Boards  Board      @relation(fields: [boardId], references: [id])
  boardId String
  userId  String
  user    UserSchema @relation(fields: [userId], references: [id])
}

model UserSchema {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Board  Board[]
  Folder Folder[]
}

model Board {
  id               String     @id @default(cuid())
  title            String     @default("Untitled")
  icon             String     @default("â›©")
  description      String     @default("Add description here, \n You can add multiline description \n start now!")
  position         Int        @default(0)
  favorite         Boolean    @default(false)
  favoritePosition Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String
  user             UserSchema @relation(fields: [userId], references: [id], onDelete: Cascade)
  Section          Section[]
  Folder           Folder[]
}

model Section {
  id        String   @id @default(cuid())
  title     String   @default("")
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  task      Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String   @id @default(cuid())
  title     String   @default("")
  content   String   @default(dbgenerated("(_utf8mb4\\'\\')")) @db.Text
  position  Int      @default(0)
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
